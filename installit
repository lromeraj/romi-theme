#!/bin/bash

source .src

# trap Ctrl + C
trap ctrl_c 2

SUPPORTED_OSV=( "19.04" "19.10" )

OS_V=$(lsb_release -r | grep -Po "([0-9]{1,}\.)+[0-9]{1,}")

SRC=ubuntu_${OS_V}/
SRC_GTK=${SRC}.gtk/
SRC_GDM=${SRC}.gdm/
SRC_ICONS=${SRC}.icons/
SRC_EXTENSIONS=${SRC}.extensions/
SRC_WALLPAPERS=${SRC}wallpapers/
SRC_SCHEMES=${SRC}.schemes/

BGS_DIR=/usr/share/backgrounds
THEME_DIR=~/.themes
ICONS_DIR=~/.icons
GDM3_CSS=/etc/alternatives/gdm3.css
EXTENSIONS_DIR=~/.local/share/gnome-shell/extensions
ROOT_EXTENSIONS_DIR=/usr/share/gnome-shell/extensions/


DEPS=( $( cat .deps ) ) # installer dependencies
CLEAN=() # things to be cleaned

SCHEMES_PATHS=()
SCHEMES_PATHS+=( "/usr/share/gtksourceview-3.0/styles/" )
SCHEMES_PATHS+=( "/usr/share/gtksourceview-4/styles/" )

OBSOLETE_EXTENSIONS=()
if [ -e ${SRC}/.obsolete_extensions ]; then
  OBSOLETE_EXTENSIONS=( $( cat ${SRC}/.obsolete_extensions ) )
fi

check_deps()
{

  info "checking installer dependencies ... \\n"

  sts=0
  for d in ${DEPS[@]}; do

    echo -en "checking ${Cyan}$d${NC} ... "
    command -v $d > /dev/null

    if [ $? -eq 0 ]; then
      echo -en "${BGreen}OK${NC}\\n"
    else
      echo -en "${BRed}ERR${NC}\\n"
      sts=1
    fi

    sleep 0.1

  done

  if [ $sts -ne 0 ]; then
    error "some dependencies are not available\\n"
    exit 1
  fi

}


check_compatibility()
{

  info "checking OS compatibility ...\\n"

  found=false
  for _V in ${SUPPORTED_OSV[@]}; do

    if [ $OS_V == $_V ]; then
      found=true
      success "Ubuntu ($OS_V) is supported\\n"
      break;
    fi

  done

  if [ $found = false ]; then
    error "Ubuntu ($OS_V) is not supported\\n"
    exit 1
  fi

}

# check root privilegies
if [ "$EUID" -eq 0 ]; then
  warn "please, run this as normal user\\n"
  exit
fi

printf ${BPurple}
cat .ascii_title
printf ${BYellow}
cat .ascii_version
printf ${NC}

# check installer dependencies
check_deps

# check os compatibility
check_compatibility

printf "Install ${BPurple}Romi${NC} theme?"
if [[ `prompt` -eq 0 ]]; then
  warn "install was cancelled\\n"
  exit
fi

# check if sudo command can be used without password
if [ sudo -n true 2>/dev/null ]; then
    warn "sudo available, skipping password input...\\n"
else
  warn "root access is required for install\n"
  sudo echo "" > /dev/null
fi


CLEAN=()

if [ $OS_V == "19.10" ]; then
  CLEAN+=( "~/.themes/Romi" )
  CLEAN+=( "~/.icons/Canta" )
  CLEAN+=( "~/.icons/Numix-Circle" )
fi

for cl in ${CLEAN[@]}; do
  info "cleaning -> ${BWhite}$cl${NC}\\n"
  rm -rf $cl
  sleep 0.2
done

info "loading wallpapers...\n"

#initialize array
typeset -A WALLS

# wallpapers
WALLS=(
  [desktop]="desktop.jpg"
  [lock_screen]="gdmlock.jpg"
)

for env in ${!WALLS[@]}; do

  fileN=${WALLS[$env]}

  if [ -e ${SRC_WALLPAPERS}/$fileN ]; then
    info "using custom wallpaper $fileN\n"
    printf "Do you want to blur it?"
    if [[ `prompt` -eq 1 ]]; then
      blur ${SRC_WALLPAPERS}/$fileN
    fi

  else

    case $env in

      desktop)
        cp ${SRC_WALLPAPERS}/.desktop_def.jpg ${SRC_WALLPAPERS}/desktop.jpg
      ;;

      lock_screen)
        cp ${SRC_WALLPAPERS}/.gdmlock_def.jpg ${SRC_WALLPAPERS}/gdmlock.jpg
      ;;

    esac

  fi

done

info "copying wallpapers -> ${BWhite}${BGS_DIR}${NC}\\n"
sudo mv ${SRC_WALLPAPERS}/gdmlock.jpg ${SRC_WALLPAPERS}/desktop.jpg ${BGS_DIR}

info "installing icons -> ${BWhite}${ICONS_DIR}${NC}\\n"
mkdir -p ${ICONS_DIR} && cp -fr ${SRC_ICONS}/* ${ICONS_DIR}

info "installing apps theme -> ${BWhite}${THEME_DIR}${NC}\\n"
mkdir -p ${THEME_DIR} && cp -fr ${SRC_GTK}/* ${THEME_DIR}

info "installing schemes ...\\n"

for SP in ${SCHEMES_PATHS[@]}; do
  if [ -e $SP ]; then
    sudo cp -f ${SRC_SCHEMES}/* $SP
  fi
done

info "installing shell theme -> ${BWhite}${GDM3_CSS}${NC}\\n"
sudo cp -f ${SRC_GDM}/gnome-shell.css ${GDM3_CSS}

info "removing obsolete extensions ... \\n"

for ext_name in ${OBSOLETE_EXTENSIONS[@]}; do

  if [ -e ${EXTENSIONS_DIR}/$ext_name ]; then

    gnome-extensions disable $ext_name &> /dev/null
    gnome-extensions uninstall $ext_name &> /dev/null

    printf "${Red}removing: ${Purple}$ext_name${NC} ... \\n"

    sleep 0.2

  fi

done

info "installing dependency extensions -> ${BWhite}${EXTENSIONS_DIR}${NC}\\n"


### copy special desktop extension
DESKTOP_EXT_NAME=desktop-icons@csoriano

if [ -e ${ROOT_EXTENSIONS_DIR}/${DESKTOP_EXT_NAME} ]; then
  info "backing up default desktop extension ... \\n"
  sudo mv ${ROOT_EXTENSIONS_DIR}/${DESKTOP_EXT_NAME} ${ROOT_EXTENSIONS_DIR}/${DESKTOP_EXT_NAME}.bak &> /dev/null
fi

info "copying custom desktop extension ... \\n"
sudo cp -r ${SRC_EXTENSIONS}/${DESKTOP_EXT_NAME} ${ROOT_EXTENSIONS_DIR}/

### enable desktop special desktop extension
gnome-extensions enable ${DESKTOP_EXT_NAME}

info "installing extensions ... \\n"

for ext_name in `ls ${SRC_EXTENSIONS}/*.zip`; do

  printf "${Purple}installing${NC}: $ext_name ... \\n"
  gnome-extensions install $ext_name &> /dev/null

  sleep 0.2

done

for ext_name in `ls ${EXTENSIONS_DIR}`; do

  printf "${Green}enabling: ${BPurple}$ext_name${NC} ... "
  gnome-extensions enable $ext_name &> /dev/null

  if [ $? -eq 0 ]; then
    printf "${Green}success${NC}\\n"
  else
    printf "${Yellow}already enabled${NC}\\n"
  fi

  sleep 0.2

done

info "resetting terminal preferences ...\\n"
dconf reset -f /org/gnome/terminal/

info "updating dconf database ...\\n"
cat ${SRC}.dconf | dconf load /

info "restarting shell ...\\n"
sleep 3 && _rshell # restart shell

success "all done\\n"

warn "a reboot is higly recommended ... do it now?"
if [[ `prompt` -eq 1 ]]; then
	sudo reboot
fi
